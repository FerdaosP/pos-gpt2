import React, { useState } from "react";
import {
    AlertCircle,
    Loader,
    FileText,
    File,
    Download,
    XCircle,
    Edit,
    Trash2,
    Eye
} from "lucide-react";
import Alert, { AlertDescription } from "@/reparatiekaart/alert";
import { Printer } from "lucide-react";
import RepairTicketPrint from "./RepairTicketPrint";

const NewRepairEntry = () => {
    const [repairs, setRepairs] = useState([]);
    const [showAddRepairForm, setShowAddRepairForm] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [notification, setNotification] = useState(null);
    const [selectedRepair, setSelectedRepair] = useState(null);
    const [attachmentPreviews, setAttachmentPreviews] = useState([]);
    const [searchTerm, setSearchTerm] = useState("");
    const [filterStatus, setFilterStatus] = useState("");
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage] = useState(5);
    const [newRepair, setNewRepair] = useState({
        repairTicketNumber: generateRepairID(),
        paymentStatus: "Not Paid",
        repairStatus: "Received",
        customerName: "",
        phoneNumber: "",
        deviceType: "",
        imei: "",
        accessCode: "",
        simCode: "",
        issueDescription: "",
        priceEstimate: "",
        repairTechnician: "",
        dateReceived: new Date().toISOString().split("T")[0],
        completionDate: "",
        notes: "",
        attachments: [],
    });
      const [editRepair, setEditRepair] = useState(null);
    const [repairHistory, setRepairHistory] = useState({});
     const [deleteRepairId, setDeleteRepairId] = useState(null);
    const [modalError, setModalError] = useState("");
    const [fieldErrors, setFieldErrors] = useState({});
    const [currentUser, setCurrentUser] = useState("Admin");
    const [sortColumn, setSortColumn] = useState("dateReceived");
    const [sortDirection, setSortDirection] = useState("desc");

    const repairStatusOptions = ["Received", "In Progress", "Awaiting Parts", "Quoted", "On Hold", "Completed", "Delivered"];

    function generateRepairID() {
        const now = new Date();
        return `REP-${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, "0")}${String(
            now.getDate()
        ).padStart(2, "0")}-${Math.floor(Math.random() * 1000)}`;
    }

    const addToHistory = (repairId, action, details) => {
        const timestamp = new Date().toISOString();
        setRepairHistory(prev => ({
            ...prev,
            [repairId]: [
                ...(prev[repairId] || []),
                { timestamp, action, details, user: currentUser }
            ]
        }));
    };

    const showNotification = (message, type = "success") => {
        setNotification({ message, type });
        setTimeout(() => setNotification(null), 3000);
    };

    const handleAddRepair = async () => {
          const requiredFields = ["customerName", "phoneNumber", "deviceType", "issueDescription"];
            const errors = {};
            const phoneRegex = /^\d{10}$/; // Simple 10-digit phone number regex

        // Check for missing required fields and populate errors
        requiredFields.forEach((field) => {
          if (!newRepair[field]) {
                errors[field] = `${field.replace(/([A-Z])/g, " $1")} is required.`;
             }
          });
         // Specific Validation
         if (newRepair.phoneNumber && !phoneRegex.test(newRepair.phoneNumber)) {
             errors.phoneNumber = "Phone number must be 10 digits.";
            }


        if (Object.keys(errors).length > 0) {
            setModalError("Please fill out all required fields before saving."); // Set modal-level error
            setFieldErrors(errors); // Set field-specific errors
          return;
         }

        setModalError(""); // Clear modal error
        setFieldErrors({}); // Clear field-specific errors

        setIsLoading(true);
        try {
            await new Promise((resolve) => setTimeout(resolve, 1000));

            const repairWithHistory = { ...newRepair };
            setRepairs((prevRepairs) => [...prevRepairs, repairWithHistory]);
            addToHistory(repairWithHistory.repairTicketNumber, "created", "Repair ticket created");


            setNewRepair({
                repairTicketNumber: generateRepairID(),
                paymentStatus: "Not Paid",
                repairStatus: "Received",
                customerName: "",
                phoneNumber: "",
                deviceType: "",
                imei: "",
                accessCode: "",
                simCode: "",
                issueDescription: "",
                priceEstimate: "",
                repairTechnician: "",
                dateReceived: new Date().toISOString().split("T")[0],
                completionDate: "",
                notes: "",
                attachments: [], // Reset attachments to empty array
            });
              setAttachmentPreviews([]);
            showNotification("Repair added successfully!");
            setShowAddRepairForm(false);
        } catch (error) {
            showNotification("Error adding repair!", "error");
        } finally {
            setIsLoading(false);
        }
    };
   const handleEdit = (repair) => {
      setEditRepair({ ...repair });
  };

   const handleUpdateRepair = async () => {
     setIsLoading(true);
    try {
        await new Promise((resolve) => setTimeout(resolve, 1000));

            setRepairs(prevRepairs =>
            prevRepairs.map(repair =>
                repair.repairTicketNumber === editRepair.repairTicketNumber
                    ? { ...editRepair }
                    : repair
            )
         );
       addToHistory(editRepair.repairTicketNumber, "updated", "Repair ticket updated");
       showNotification("Repair updated successfully!");
        setEditRepair(null);
    } catch(error) {
         showNotification("Error updating repair!", "error")
    } finally {
        setIsLoading(false);
    }
   };


    const handleStatusUpdate = async (id, newStatus) => {
        setIsLoading(true);
        try {
            await new Promise(resolve => setTimeout(resolve, 500));
            setRepairs(prevRepairs =>
                prevRepairs.map(repair =>
                    repair.repairTicketNumber === id
                        ? { ...repair, repairStatus: newStatus }
                        : repair
                )
            );
            addToHistory(id, "status_update", `Status updated to ${newStatus}`);
            if (newStatus === "Completed") {
              console.log(`Email sent to customer for ticket ${id}`);
            }
            showNotification("Status updated successfully!");
        } catch (error) {
            showNotification("Error updating status!", "error");
        } finally {
            setIsLoading(false);
        }
    };

  const confirmDeleteRepair = (repairId) => {
        setDeleteRepairId(repairId);
  };

  const handleDeleteRepair = async () => {
       setIsLoading(true);
       try {
           await new Promise(resolve => setTimeout(resolve, 500));
           setRepairs(prevRepairs =>
              prevRepairs.filter(repair => repair.repairTicketNumber !== deleteRepairId)
            );
           addToHistory(deleteRepairId, "deleted", "Repair ticket deleted");
            showNotification("Repair deleted successfully!");
            setDeleteRepairId(null);
       } catch(error) {
             showNotification("Error deleting repair!", "error")
       } finally {
            setIsLoading(false);
       }
  };

    const handleSearch = (e) => {
        setSearchTerm(e.target.value);
        setCurrentPage(1);
    };

    const handleFilterStatus = (e) => {
        setFilterStatus(e.target.value);
        setCurrentPage(1);
    };

    const filteredRepairs = repairs.filter((repair) => {
        return (
            (repair.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                repair.repairTicketNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                repair.deviceType.toLowerCase().includes(searchTerm.toLowerCase())) &&
            (filterStatus === "" || repair.repairStatus === filterStatus)
        );
    });

      const handleSort = (column) => {
      if (column === sortColumn) {
           setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
       } else {
           setSortColumn(column);
           setSortDirection('asc');
      }
    };

    const sortedRepairs = [...filteredRepairs].sort((a, b) => {
      const aValue = a[sortColumn];
      const bValue = b[sortColumn];
        if (aValue < bValue) {
          return sortDirection === 'asc' ? -1 : 1;
          }
        if(aValue > bValue) {
            return sortDirection === 'asc' ? 1: -1;
        }
      return 0;

   });
    const paginatedRepairs = sortedRepairs.slice(
        (currentPage - 1) * itemsPerPage,
        currentPage * itemsPerPage
    );
  const handleAttachmentChange = (e) => {
      const files = Array.from(e.target.files); // Convert FileList to an array
  
      if (files && files.length > 0) {
          const newPreviews = [];
          const newAttachments = [];
  
          files.forEach((file) => {
              const reader = new FileReader();
              reader.onloadend = () => {
                  newPreviews.push({
                      name: file.name,
                      type: file.type,
                      url: reader.result
                  });
                 
                  // Update the preview and attachment array
                  if (newPreviews.length === files.length) {
                    setAttachmentPreviews((prev) => [...prev, ...newPreviews]);
                    setNewRepair((prev) => ({...prev, attachments: [...prev.attachments, ...files] }));
                }
              };
              reader.readAsDataURL(file);
          });
  
      }
  };


    const handleExport = async (format) => {
        setIsLoading(true);
        try {
             await new Promise(resolve => setTimeout(resolve, 1000));
              switch (format) {
                    case 'csv':
                         exportToCSV();
                        break;
                    case 'excel':
                         exportToExcel();
                        break;
                     case 'pdf':
                         exportToPDF();
                       break;
                 }
           showNotification(`Export to ${format.toUpperCase()} completed!`);

        } catch (error) {
             showNotification(`Error exporting to ${format.toUpperCase()}!`, "error");
        }
         finally {
            setIsLoading(false);
         }
    };

    const exportToCSV = () => {
        const csvContent = [
            [
                "Ticket Number",
                "Customer Name",
                "Phone Number",
                "Device Type",
                "Repair Status",
                "Date Received",
                "Notes"
            ].join(","),
            ...repairs.map((repair) =>
                [
                    repair.repairTicketNumber,
                    repair.customerName,
                    repair.phoneNumber,
                    repair.deviceType,
                    repair.repairStatus,
                    repair.dateReceived,
                    repair.notes,
                ].join(",")
            ),
        ].join("\n");

        const blob = new Blob([csvContent], { type: "text/csv" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.download = "repairs.csv";
        link.click();
        showNotification('CSV export completed')
    };

    const exportToExcel = () => {
        const data = repairs.map(repair => ({
            "Ticket Number": repair.repairTicketNumber,
            "Customer Name": repair.customerName,
        }));
        console.log("Excel export:", data);
        showNotification('Excel export completed')
    };

    const exportToPDF = () => {
        console.log("PDF export:", repairs);
        showNotification('PDF export completed')

    };

  const handleRemoveAttachment = (index) => {
      // Remove the attachment from both `attachmentPreviews` and `newRepair.attachments`
      setAttachmentPreviews((prevPreviews) => prevPreviews.filter((_, i) => i !== index));
      setNewRepair((prevRepair) => {
        const updatedAttachments = prevRepair.attachments.filter((_, i) => i !== index);
        return { ...prevRepair, attachments: updatedAttachments };
      });
    };

  const handleViewAttachments = (repair) => {
        setSelectedRepair(repair.repairTicketNumber); // Use the selectedRepair state for the modal
        setAttachmentPreviews(repair.attachments.map(file => ({
                name: file.name,
                type: file.type,
                url: URL.createObjectURL(file)
            })
        )); // Generate previews from file objects
    };
    const handleCloseViewAttachments = () => {
      setSelectedRepair(null);
    };

    const RepairItem = ({ repair }) => {
        const [isExpanded, setIsExpanded] = useState(false);
        return (
          <tr className="border-b border-gray-200 hover:bg-gray-50">
            <td className="py-2 px-4">{repair.repairTicketNumber}</td>
            <td className="py-2 px-4">{repair.customerName}</td>
            <td className="py-2 px-4">{repair.deviceType}</td>
            <td className="py-2 px-4">{repair.repairStatus}</td>
            <td className="py-2 px-4">{new Date(repair.dateReceived).toLocaleDateString()}</td>
            <td className="py-2 px-4">
               <button
                    onClick={() => setIsExpanded(!isExpanded)}
                    className="text-blue-500 hover:text-blue-700 text-sm"
                     aria-label={isExpanded ? "Show Less" : "Show More"}
                 >
                      {isExpanded ? "Show Less" : "Show More"}
                </button>
                {isExpanded && (
                    <div className="mt-2">
                        <div className="text-sm text-gray-500">
                            <div><strong>Phone:</strong> {repair.phoneNumber}</div>
                            <div><strong>IMEI:</strong> {repair.imei || "N/A"}</div>
                            <div><strong>Access Code:</strong> {repair.accessCode || "N/A"}</div>
                            <div><strong>SIM Code:</strong> {repair.simCode || "N/A"}</div>
                            <div><strong>Issue:</strong> {repair.issueDescription}</div>
                            <div><strong>Completion:</strong> {repair.completionDate ? new Date(repair.completionDate).toLocaleDateString() : "N/A"}</div>
                            <div><strong>Notes:</strong> {repair.notes || "N/A"}</div>
                             <div className="flex justify-between items-center mt-2">
                              <select
                                  value={repair.repairStatus}
                                  onChange={(e) => handleStatusUpdate(repair.repairTicketNumber, e.target.value)}
                                  className="border rounded p-2"
                                  aria-label="Update Repair Status"
                              >
                                {repairStatusOptions.map((status) => (
                                    <option key={status} value={status}>
                                      {status}
                                    </option>
                                ))}
                              </select>
                             <div className="flex items-center space-x-2">
                                 <button
                                      onClick={() => handleEdit(repair)}
                                      className="text-blue-500 hover:text-blue-700 text-sm"
                                      aria-label="Edit Repair"
                                  >
                                      <Edit size={16}/>
                                  </button>
                                  <button
                                    onClick={() => confirmDeleteRepair(repair.repairTicketNumber)}
                                    className="text-red-500 hover:text-red-700 text-sm"
                                     aria-label="Delete Repair"
                                  >
                                    <Trash2 size={16} />
                                  </button>
                                  <button
                                    onClick={() => handleViewAttachments(repair)}
                                     className="text-green-500 hover:text-green-700 text-sm"
                                    aria-label="View Attachments"
                                  >
                                      <Eye size={16} />
                                 </button>
                                  <button
                                      onClick={() => setSelectedRepair(repair.repairTicketNumber)}
                                      className="text-blue-500 hover:text-blue-700 text-sm"
                                      aria-label="View Repair History"
                                  >
                                      View History
                                  </button>
                               </div>
                            </div>
                        </div>
                    </div>
                   )}
             </td>
          </tr>
        );
    };

    return (
        <div className="p-4 relative">
            {isLoading && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-4 rounded-lg flex items-center space-x-2">
                        <Loader className="animate-spin" />
                        <span>Processing...</span>
                    </div>
                </div>
            )}

            {notification && (
                <Alert className={`mb-4 ${notification.type === 'error' ? 'bg-red-50' : 'bg-green-50'}`}>
                    <AlertCircle className={notification.type === 'error' ? 'text-red-500' : 'text-green-500'} />
                    <AlertDescription>{notification.message}</AlertDescription>
                </Alert>
            )}

            <h1 className="text-2xl font-bold mb-4">Repairs</h1>

            <div className="flex mb-4">
                <input
                    type="text"
                    placeholder="Search by Customer, Ticket, or Device"
                    value={searchTerm}
                    onChange={handleSearch}
                    className="border p-2 mr-2 rounded w-full"
                    aria-label="Search repairs"
                />
                <select
                    value={filterStatus}
                    onChange={handleFilterStatus}
                    className="border p-2 rounded"
                      aria-label="Filter by Status"
                >
                    <option value="">All Statuses</option>
                    {repairStatusOptions.map((status) => (
                        <option key={status} value={status}>
                            {status}
                        </option>
                    ))}
                </select>
            </div>

            <div className="mb-4">
                <span className="text-sm text-gray-600">
                    Showing page {currentPage} of {Math.ceil(sortedRepairs.length / itemsPerPage)}
                    ({sortedRepairs.length} total records)
                </span>
            </div>

            <div className="mb-6">
                <h2 className="text-xl font-semibold mb-2">Current Repairs</h2>
                 {repairs.length === 0 ? (
                    <p className="text-gray-500">No repairs at the moment.</p>
                 ) : (
                    <div className="overflow-x-auto">
                    <table className="w-full table-auto border-collapse border border-gray-300">
                        <thead className="bg-gray-100">
                            <tr className="text-left">
                                <th onClick={() => handleSort("repairTicketNumber")}  className="cursor-pointer py-2 px-4">Ticket #</th>
                                <th onClick={() => handleSort("customerName")} className="cursor-pointer py-2 px-4">Customer</th>
                                <th onClick={() => handleSort("deviceType")}  className="cursor-pointer py-2 px-4">Device</th>
                                <th onClick={() => handleSort("repairStatus")}  className="cursor-pointer py-2 px-4">Status</th>
                                <th onClick={() => handleSort("dateReceived")}  className="cursor-pointer py-2 px-4">Date Received</th>
                                <th className="py-2 px-4">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {paginatedRepairs.map((repair) => (
                            <RepairItem key={repair.repairTicketNumber} repair={repair} />
                            ))}
                        </tbody>
                    </table>
                    </div>
                 )}
            </div>

            <div className="flex justify-between items-center mb-4">
                <div className="flex space-x-2">
                    <button
                        onClick={() => handleExport('csv')}
                        className="bg-blue-500 text-white px-4 py-2 rounded flex items-center space-x-2"
                        aria-label="Export to CSV"
                    >
                        <Download size={16} />
                        <span>CSV</span>
                    </button>
                    <button
                        onClick={() => handleExport('excel')}
                        className="bg-green-500 text-white px-4 py-2 rounded flex items-center space-x-2"
                        aria-label="Export to Excel"
                    >
                        <FileText size={16} />
                        <span>Excel</span>
                    </button>
                    <button
                        onClick={() => handleExport('pdf')}
                        className="bg-red-500 text-white px-4 py-2 rounded flex items-center space-x-2"
                        aria-label="Export to PDF"
                    >
                        <File size={16} />
                        <span>PDF</span>
                    </button>
                </div>

                <div className="flex space-x-2">
                    <button
                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                        disabled={currentPage === 1}
                        className="bg-gray-200 text-gray-700 px-4 py-2 rounded disabled:opacity-50"
                        aria-label="Previous Page"
                    >
                        Previous
                    </button>
                    <button
                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, Math.ceil(sortedRepairs.length / itemsPerPage)))}
                        disabled={currentPage >= Math.ceil(sortedRepairs.length / itemsPerPage)}
                        className="bg-gray-200 text-gray-700 px-4 py-2 rounded disabled:opacity-50"
                        aria-label="Next Page"
                    >
                        Next
                    </button>
                </div>
            </div>

            <button
                onClick={() => setShowAddRepairForm(true)}
                className="bg-green-500 text-white px-4 py-2 rounded mb-4"
                aria-label="Add New Repair"
            >
                Add Repair
            </button>

             {/* View Attachment Modal */}
           {selectedRepair && attachmentPreviews.length > 0 && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                    <h3 className="text-lg font-semibold mb-4">
                        Attachments for Repair #{selectedRepair}
                    </h3>
                    <div className="grid grid-cols-3 gap-4">
                        {attachmentPreviews.map((preview, index) => (
                            <div key={index} className="relative">
                                {preview.type.startsWith("image/") ? (
                                  <div className="relative">
                                      <img
                                        src={preview.url}
                                        alt={`Attachment ${index + 1}`}
                                        className="max-w-full max-h-48 border rounded"
                                      />
                                   </div>
                                ) : (
                                    <div className="p-2 border rounded flex items-center justify-between">
                                        <FileText className="inline-block mr-2" />
                                        <span className="truncate">{preview.name}</span>
                                    </div>
                                 )}
                            </div>
                        ))}
                    </div>
                    <button
                         onClick={handleCloseViewAttachments}
                        className="mt-4 bg-gray-500 text-white px-4 py-2 rounded"
                    >
                        Close
                    </button>
                </div>
            </div>
           )}

            {selectedRepair && !attachmentPreviews.length && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                        <h3 className="text-lg font-semibold mb-4">Repair History</h3>
                        <ul className="space-y-2">
                            {repairHistory[selectedRepair]?.map((entry, index) => (
                                <li key={index} className="border-b pb-2">
                                    <div className="text-sm text-gray-600">
                                        {new Date(entry.timestamp).toLocaleString()}
                                    </div>
                                    <div className="font-medium">{entry.action}</div>
                                     <div>
                                    {entry.details} {entry.user && `- by ${entry.user}`}
                                   </div>
                                </li>
                            ))}
                        </ul>
                        <button
                            onClick={() => setSelectedRepair(null)}
                            className="mt-4 bg-gray-500 text-white px-4 py-2 rounded"
                        >
                            Close
                        </button>
                    </div>
                </div>
            )}
           {/* Edit Repair Modal */}
            {editRepair && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                         <h2 className="text-xl font-semibold mb-4">Edit Repair</h2>
                          <div className="space-y-4">
                        {/* Customer Information */}
                        <div>
                            <h3 className="text-md font-semibold mb-2">Customer Information</h3>
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <label className="block font-medium mb-1">Customer Name:</label>
                                      <input
                                          type="text"
                                          value={editRepair.customerName}
                                          onChange={(e) => setEditRepair({ ...editRepair, customerName: e.target.value })}
                                          className="border rounded p-2 w-full max-w-full"
                                          required
                                      />
                                </div>
                                <div>
                                  <label className="block font-medium mb-1">Phone Number:</label>
                                        <input
                                          type="tel"
                                          value={editRepair.phoneNumber}
                                          onChange={(e) => setEditRepair({ ...editRepair, phoneNumber: e.target.value })}
                                           className="border rounded p-2 w-full max-w-full"
                                          required
                                      />
                                </div>
                            </div>
                        </div>

                            {/* Device Information */}
                        <div>
                             <h3 className="text-md font-semibold mb-2">Device Information</h3>
                             <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block font-medium mb-1">Device Type:</label>
                                        <input
                                            type="text"
                                            value={editRepair.deviceType}
                                            onChange={(e) => setEditRepair({ ...editRepair, deviceType: e.target.value })}
                                            className="border rounded p-2 w-full max-w-full"
                                            required
                                        />
                                </div>
                                <div>
                                    <label className="block font-medium mb-1">IMEI:</label>
                                        <input
                                          type="text"
                                          value={editRepair.imei}
                                          onChange={(e) => setEditRepair({ ...editRepair, imei: e.target.value })}
                                          className="border rounded p-2 w-full max-w-full"
                                         />
                                </div>
                             </div>
                         </div>

                          {/* Security Codes */}
                        <div>
                             <h3 className="text-md font-semibold mb-2">Security Codes</h3>
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block font-medium mb-1">Access Code:</label>
                                        <input
                                            type="text"
                                            value={editRepair.accessCode}
                                            onChange={(e) => setEditRepair({ ...editRepair, accessCode: e.target.value })}
                                            className="border rounded p-2 w-full max-w-full"
                                        />
                                </div>
                                <div>
                                    <label className="block font-medium mb-1">SIM Code:</label>
                                    <input
                                        type="text"
                                        value={editRepair.simCode}
                                        onChange={(e) => setEditRepair({ ...editRepair, simCode: e.target.value })}
                                        className="border rounded p-2 w-full max-w-full"
                                    />
                                </div>
                           </div>
                       </div>

                            {/* Repair Details */}
                            <div>
                              <h3 className="text-md font-semibold mb-2">Repair Details</h3>
                               <div className="grid grid-cols-2 gap-4">
                                 <div>
                                       <label className="block font-medium mb-1">Price Estimate:</label>
                                            <input
                                              type="text"
                                              value={editRepair.priceEstimate}
                                              onChange={(e) => setEditRepair({ ...editRepair, priceEstimate: e.target.value })}
                                               className="border rounded p-2 w-full max-w-full"
                                            />
                                 </div>
                                   <div>
                                       <label className="block font-medium mb-1">Repair Technician:</label>
                                            <input
                                               type="text"
                                              value={editRepair.repairTechnician}
                                              onChange={(e) => setEditRepair({ ...editRepair, repairTechnician: e.target.value })}
                                               className="border rounded p-2 w-full max-w-full"
                                            />
                                    </div>
                                 </div>
                            </div>

                            {/* Dates */}
                            <div>
                                <h3 className="text-md font-semibold mb-2">Dates</h3>
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                      <label className="block font-medium mb-1">Date Received:</label>
                                            <input
                                            type="date"
                                            value={editRepair.dateReceived}
                                            onChange={(e) => setEditRepair({ ...editRepair, dateReceived: e.target.value })}
                                              className="border rounded p-2 w-full max-w-full"
                                           />
                                    </div>
                                  <div>
                                      <label className="block font-medium mb-1">Completion Date:</label>
                                            <input
                                                type="date"
                                               value={editRepair.completionDate}
                                               onChange={(e) => setEditRepair({ ...editRepair, completionDate: e.target.value })}
                                              className="border rounded p-2 w-full max-w-full"
                                             />
                                     </div>
                                </div>
                           </div>

                            {/* Full Width Fields */}
                            <div>
                                <label className="block font-medium mb-1">Issue Description:</label>
                                <textarea
                                    value={editRepair.issueDescription}
                                    onChange={(e) => setEditRepair({ ...editRepair, issueDescription: e.target.value })}
                                    className="border rounded p-2 w-full max-w-full"
                                    required
                                    rows={3}
                                />
                            </div>

                            <div>
                                <label className="block font-medium mb-1">Notes:</label>
                                <textarea
                                    value={editRepair.notes}
                                    onChange={(e) => setEditRepair({ ...editRepair, notes: e.target.value })}
                                    className="border rounded p-2 w-full max-w-full"
                                    rows={3}
                                />
                            </div>

                         </div>
                           <div className="flex justify-end space-x-2 mt-6">
                               <button
                                     onClick={handleUpdateRepair}
                                     className="bg-blue-500 text-white px-4 py-2 rounded"
                                 >
                                   Update
                               </button>
                                <button
                                   onClick={() => setEditRepair(null)}
                                   className="bg-gray-500 text-white px-4 py-2 rounded"
                                 >
                                   Cancel
                               </button>
                         </div>
                    </div>
                </div>
            )}
           {/* Confirmation Modal for Deletion */}
            {deleteRepairId && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-lg">
                        <p className="mb-4">Are you sure you want to delete this repair?</p>
                        <div className="flex justify-end space-x-2">
                            <button onClick={handleDeleteRepair} className="bg-red-500 text-white px-4 py-2 rounded">
                                Confirm Delete
                            </button>
                            <button onClick={() => setDeleteRepairId(null)} className="bg-gray-500 text-white px-4 py-2 rounded">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {showAddRepairForm && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                        <h2 className="text-xl font-semibold mb-4">New Repair</h2>

                        {modalError && (
                            <div className="bg-red-100 text-red-700 p-2 mb-4 rounded">
                                {modalError}
                            </div>
                        )}

                    <div className="space-y-4">
                        {/* Customer Information */}
                        <div>
                            <h3 className="text-md font-semibold mb-2">Customer Information</h3>
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <label className="block font-medium mb-1">Customer Name:</label>
                                      <input
                                          type="text"
                                          value={newRepair.customerName}
                                          onChange={(e) => setNewRepair({ ...newRepair, customerName: e.target.value })}
                                          className={`border rounded p-2 w-full max-w-full ${fieldErrors.customerName ? "border-red-500" : ""}`}
                                          required
                                      />
                                      {fieldErrors.customerName && <span className="text-red-500 text-sm">{fieldErrors.customerName}</span>}
                                </div>
                                <div>
                                  <label className="block font-medium mb-1">Phone Number:</label>
                                        <input
                                          type="tel"
                                          value={newRepair.phoneNumber}
                                          onChange={(e) => setNewRepair({ ...newRepair, phoneNumber: e.target.value })}
                                          className={`border rounded p-2 w-full max-w-full ${fieldErrors.phoneNumber ? "border-red-500" : ""}`}
                                          required
                                      />
                                    {fieldErrors.phoneNumber && <span className="text-red-500 text-sm">{fieldErrors.phoneNumber}</span>}
                                </div>
                            </div>
                        </div>

                            {/* Device Information */}
                        <div>
                             <h3 className="text-md font-semibold mb-2">Device Information</h3>
                             <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block font-medium mb-1">Device Type:</label>
                                        <input
                                            type="text"
                                            value={newRepair.deviceType}
                                            onChange={(e) => setNewRepair({ ...newRepair, deviceType: e.target.value })}
                                            className={`border rounded p-2 w-full max-w-full ${fieldErrors.deviceType ? "border-red-500" : ""}`}
                                            required
                                        />
                                    {fieldErrors.deviceType && <span className="text-red-500 text-sm">{fieldErrors.deviceType}</span>}
                                </div>
                                <div>
                                    <label className="block font-medium mb-1">IMEI:</label>
                                        <input
                                          type="text"
                                          value={newRepair.imei}
                                          onChange={(e) => setNewRepair({ ...newRepair, imei: e.target.value })}
                                          className="border rounded p-2 w-full max-w-full"
                                         />
                                </div>
                             </div>
                         </div>

                          {/* Security Codes */}
                        <div>
                             <h3 className="text-md font-semibold mb-2">Security Codes</h3>
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block font-medium mb-1">Access Code:</label>
                                        <input
                                            type="text"
                                            value={newRepair.accessCode}
                                            onChange={(e) => setNewRepair({ ...newRepair, accessCode: e.target.value })}
                                            className="border rounded p-2 w-full max-w-full"
                                        />
                                </div>
                                <div>
                                    <label className="block font-medium mb-1">SIM Code:</label>
                                    <input
                                        type="text"
                                        value={newRepair.simCode}
                                        onChange={(e) => setNewRepair({ ...newRepair, simCode: e.target.value })}
                                        className="border rounded p-2 w-full max-w-full"
                                    />
                                </div>
                           </div>
                       </div>

                            {/* Repair Details */}
                            <div>
                              <h3 className="text-md font-semibold mb-2">Repair Details</h3>
                               <div className="grid grid-cols-2 gap-4">
                                 <div>
                                       <label className="block font-medium mb-1">Price Estimate:</label>
                                            <input
                                              type="text"
                                              value={newRepair.priceEstimate}
                                              onChange={(e) => setNewRepair({ ...newRepair, priceEstimate: e.target.value })}
                                               className="border rounded p-2 w-full max-w-full"
                                            />
                                 </div>
                                   <div>
                                       <label className="block font-medium mb-1">Repair Technician:</label>
                                            <input
                                               type="text"
                                              value={newRepair.repairTechnician}
                                              onChange={(e) => setNewRepair({ ...newRepair, repairTechnician: e.target.value })}
                                               className="border rounded p-2 w-full max-w-full"
                                            />
                                    </div>
                                 </div>
                            </div>

                            {/* Dates */}
                            <div>
                                <h3 className="text-md font-semibold mb-2">Dates</h3>
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                      <label className="block font-medium mb-1">Date Received:</label>
                                            <input
                                            type="date"
                                            value={newRepair.dateReceived}
                                            onChange={(e) => setNewRepair({ ...newRepair, dateReceived: e.target.value })}
                                              className="border rounded p-2 w-full max-w-full"
                                           />
                                    </div>
                                  <div>
                                      <label className="block font-medium mb-1">Completion Date:</label>
                                            <input
                                                type="date"
                                               value={newRepair.completionDate}
                                               onChange={(e) => setNewRepair({ ...newRepair, completionDate: e.target.value })}
                                              className="border rounded p-2 w-full max-w-full"
                                             />
                                     </div>
                                </div>
                           </div>

                            {/* Full Width Fields */}
                            <div>
                                <label className="block font-medium mb-1">Issue Description:</label>
                                <textarea
                                    value={newRepair.issueDescription}
                                    onChange={(e) => setNewRepair({ ...newRepair, issueDescription: e.target.value })}
                                    className={`border rounded p-2 w-full max-w-full ${fieldErrors.issueDescription ? "border-red-500" : ""}`}
                                    required
                                    rows={3}
                                />
                                {fieldErrors.issueDescription && <span className="text-red-500 text-sm">{fieldErrors.issueDescription}</span>}
                            </div>

                            <div>
                                <label className="block font-medium mb-1">Notes:</label>
                                <textarea
                                    value={newRepair.notes}
                                    onChange={(e) => setNewRepair({ ...newRepair, notes: e.target.value })}
                                    className="border rounded p-2 w-full max-w-full"
                                    rows={3}
                                />
                            </div>

                            <div>
                                <label className="block font-medium mb-1">Attachments:</label>
                                <input
                                    type="file"
                                    onChange={handleAttachmentChange}
                                    className="border rounded p-2 w-full max-w-full"
                                    multiple
                                />
                                {attachmentPreviews && (
                                    <div className="mt-2 grid grid-cols-3 gap-2">
                                        {attachmentPreviews.map((preview, index) => (
                                            <div key={index} className="relative">
                                                {preview.type.startsWith("image/") ? (
                                                <div className="relative">
                                                  <img
                                                        src={preview.url}
                                                        alt={`Preview ${index + 1}`}
                                                        className="max-w-full mt-2 border rounded"
                                                    />
                                                    <button
                                                      onClick={() => handleRemoveAttachment(index)}
                                                      className="absolute top-0 right-0 bg-gray-500 text-white rounded-full p-1"
                                                    >
                                                      <XCircle size={16} />
                                                    </button>
                                                  </div>
                                                ) : (
                                                    <div className="mt-2 p-2 border rounded flex items-center justify-between">
                                                        <FileText className="inline-block mr-2" />
                                                        <span className="truncate">{preview.name}</span>
                                                        <button
                                                            onClick={() => handleRemoveAttachment(index)}
                                                            className="bg-gray-500 text-white rounded-full p-1"
                                                          >
                                                              <XCircle size={16} />
                                                        </button>
                                                    </div>
                                                )}
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>
                        </div>

                        <div className="flex justify-end space-x-2 mt-6">
                            <button
                                onClick={handleAddRepair}
                                className="bg-blue-500 text-white px-4 py-2 rounded"
                            >
                                Save Repair
                            </button>
                            <button
                                onClick={() => setShowAddRepairForm(false)}
                                className="bg-gray-500 text-white px-4 py-2 rounded"
                            >
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default NewRepairEntry;
